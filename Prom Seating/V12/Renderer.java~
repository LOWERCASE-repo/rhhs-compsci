
// graphics
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.Color;

// gui
import javax.swing.JPanel;
import java.awt.Dimension;

// listeners
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;

// util
import java.util.ArrayList;

// file io
import java.io.PrintWriter;
import java.io.File;
import java.io.IOException;
import java.util.Scanner;

/**
 * Renderer.java
 * creates and maintains the center panel of the floor plan
 * @author Bryan Zhang and Glen Wang
 * @version 1.0
 **/
class Renderer extends JPanel implements KeyListener {
    
    public Tool[] tools; // shouldnt be public but i made it public anyways for buttons
    private Tool currentTool;
    private Tool prevTool;
    private ArrayList<Rectangle> tableRects;
    private ArrayList<Rectangle> miscRects;
    private ArrayList<Integer> tableTargets;
    private ArrayList<Integer> miscTargets;
    private Rectangle selectionBox;
    
    /**
     * Renderer
     * creates and maintains the center panel of the floor plan
     */
    Renderer(ArrayList<Rectangle> tableRects, ArrayList<Rectangle> miscRects, ArrayList<Integer> tableTargets, ArrayList<Integer> miscTargets) {
        this.tableRects = tableRects;
        this.tableTargets = tableTargets;
        this.miscTargets = miscTargets;
        this.miscRects = miscRects;
        selectionBox = new Rectangle (0, 0, 0, 0);
        
        tools = new Tool[4];
        tools[0] = new Pan(this, tableRects, miscRects);
        tools[1] = new Select(this, tableRects, miscRects, tableTargets, miscTargets, selectionBox);
        tools[2] = new Inspect(this, tableRects, miscRects, tableTargets, miscTargets);
        tools[3] = new Draw(this, miscRects, tableTargets, miscTargets);
        currentTool = tools[1];
        prevTool = null;
        this.addMouseListener(tools[1]);
        this.addKeyListener(this);
        System.out.println("renderer initialized!");
        this.setPreferredSize(new Dimension(960, 720)); //640
        
        
    }
    
    public void paintComponent(Graphics g) { 
        super.paintComponent(g);
        setDoubleBuffered(true);
        setBackground(new Color(108, 91, 84)); 
        paintTables(g);
        paintTableTargets(g);
        paintMiscRects(g);
        paintMiscTargets(g);
        //System.out.println(selectionBox.getX() + " " + selectionBox.getY());
        g.drawRect((int)selectionBox.getX(), (int)selectionBox.getY(), (int)selectionBox.getWidth(), (int)selectionBox.getHeight());
        repaint();
    }
    
    /**
     * painttableTargets
     * Paints over targeted rectangles to indicate selected rectangles
     * @param g Used to be able to draw;
     */
    private void paintTableTargets(Graphics g) {
        for (Integer target : tableTargets) {
            Rectangle rect = tableRects.get(target); 
            g.setColor(new Color(0, 0, 0, 70));
            g.fillRect((int)rect.getX(), (int)rect.getY(), (int)rect.getWidth() , (int)rect.getHeight());
        }
        
        //System.out.println("tables painted");
    }
    private void paintMiscTargets(Graphics g) {
        for (Integer target : miscTargets) {
            Rectangle rect = miscRects.get(target); 
            g.setColor(new Color(0, 0, 0, 70));
            g.fillRect((int)rect.getX(), (int)rect.getY(), (int)rect.getWidth() , (int)rect.getHeight());
        }
    }
    /**
     * paintTables
     * translates all the tableRects by shiftX and shiftY
     * @param two ints representing x shift and y shift
     */
    private void paintTables(Graphics g) {
        for (int i = 0; i < tableRects.size(); ++i) {
            Rectangle rect = tableRects.get(i);
		g.setColor(new Color(214, 184, 164));
            g.fillRect((int)rect.getX(), (int)rect.getY(), (int)rect.getWidth() , (int)rect.getHeight());
            g.setColor(Color.BLACK); // what's this?
            g.drawRect((int)rect.getX(), (int)rect.getY(), (int)rect.getWidth() , (int)rect.getHeight());
            g.drawString(Integer.toString(i), (int)rect.getX() + (int)rect.getWidth() / 2, (int)rect.getY() + (int)rect.getHeight() / 2);
        }
        //System.out.println("tables painted");
    }
    
    /**
     * paintMiscRects
     * translates all the tableRects by shiftX and shiftY
     * @param two ints representing x shift and y shift
     */
    private void paintMiscRects(Graphics g) {
        for (int i = 0; i < miscRects.size(); i++) {
            Rectangle rect = miscRects.get(i);
            g.setColor(new Color(186, 136, 138));
            g.fillRect((int)rect.getX(), (int)rect.getY(), (int)rect.getWidth() , (int)rect.getHeight());
            g.setColor(Color.BLACK);
            g.drawRect((int)rect.getX(), (int)rect.getY(), (int)rect.getWidth() , (int)rect.getHeight());
        }
        //System.out.println("tables painted");
    }
    
    public void setTool(int toolIndex) {
        currentTool = tools[toolIndex];
        this.removeMouseListener(this.getMouseListeners()[0]);
        this.addMouseListener(currentTool);
    }
    
    /**
     * update
     * updates and stuff
     **/
    public void update () {
        currentTool.update();
    }
    
    public void keyTyped(KeyEvent e) {
    }
    
    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_LEFT:
                System.out.println("TO THE LEFT TO THE LEFT");
            for (Integer target : tableTargets) {
                Rectangle rect = tableRects.get(target); 
                rect.translate(-1, 0);
            }
            case KeyEvent.VK_SPACE:
                if (prevTool == null) {
                prevTool = currentTool;
                currentTool = tools[0];
                this.removeMouseListener(this.getMouseListeners()[0]);
                this.addMouseListener(currentTool);
            }
        }
    }
    
    
    /**
     * keyReleased
     * manages functionality mapped to keys
     * @param a KeyEvent for key info
     */
    public void keyReleased(KeyEvent e) {
        switch(e.getKeyCode()) {
            case KeyEvent.VK_SPACE:
                currentTool = prevTool;
                prevTool = null;
                this.removeMouseListener(this.getMouseListeners()[0]);
                this.addMouseListener(currentTool);
                break;
            case KeyEvent.VK_S: 
                setTool(1);
                break;
            case KeyEvent.VK_A: 
                setTool(2);
                break;
            case KeyEvent.VK_D:
                setTool(3);
                break;
            case KeyEvent.VK_ENTER:
                tableTargets.clear();
                miscTargets.clear();
                break;
            case KeyEvent.VK_Q:
				try{ saveFloorPlan(); } catch (Exception exc) {}
				break;
			case KeyEvent.VK_E:
				try{ loadFloorPlan(); } catch (Exception exc) {}
				break;
        }
    }
    
    private void saveFloorPlan()  throws IOException {
		System.out.println("savign fp");
		File savedFloorPlan = new File ("savedFloorPlan.txt");
		PrintWriter output = new PrintWriter(savedFloorPlan);
		Rectangle currentRect;
		for (int i = 0; i < tableRects.size(); ++i) {
			currentRect = tableRects.get(i);
			output.println(currentRect.x + " " + currentRect.y + " " + currentRect.width + " " + currentRect.height);
		}
		output.println("end of saved tables");
		for (int i = 0; i < miscRects.size(); ++i) {
			currentRect = miscRects.get(i);
			output.println(currentRect.x + " " + currentRect.y + " " + currentRect.width + " " + currentRect.height);
		}
		output.println("end of misc rectangles");
		output.close();
	}
	
	private void loadFloorPlan() throws IOException {
		System.out.println("loadin fp");
		File savedFloorPlan = new File("savedFloorPlan.txt");
        Scanner input = new Scanner(savedFloorPlan);
		tableRects.clear();
		miscRects.clear();
		String rect = input.nextLine();
		while(!rect.equals("end of saved tables")) {
			String[] dimens = rect.split(" ");
			tableRects.add(new Rectangle(Integer.parseInt(dimens[0]), Integer.parseInt(dimens[1]), Integer.parseInt(dimens[2]), Integer.parseInt(dimens[3])));
			rect = input.nextLine();
		}
		rect = input.nextLine();
		while(!rect.equals("end of misc rectangles")) {
			String[] dimens = rect.split(" ");
			miscRects.add(new Rectangle(Integer.parseInt(dimens[0]), Integer.parseInt(dimens[1]), Integer.parseInt(dimens[2]), Integer.parseInt(dimens[3])));
			rect = input.nextLine();
		}
		input.close();
	}
}
